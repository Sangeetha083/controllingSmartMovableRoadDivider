#include <NewPing.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);

#define resetbutton 8    
int ena=5;
int flag1=0;
int flag2=0;
#define TRIGGER_PIN_R 9
#define ECHO_PIN_R 10

#define TRIGGER_PIN_L 11
#define ECHO_PIN_L 12

 #define MAX_DISTANCE_RIGHT 400  
 #define MAX_DISTANCE_LEFT 400 

#define R_irsensor 3   //R-right
#define L_irsensor 2  //L-left
int R_irstate;
int L_irstate;
int count=0;      //right side count
int count1=0;    //left side count
int Rtd=0;
int Ltd=0;
int leftdistance=10;
int rightdistance=10;
//int distance_R=10;
//int distance_L=10;
boolean go_Forward = false;
boolean go_backward = false;


#define enright 10
const int LeftMotorForward = 7;
const int LeftMotorBackward = 6;

NewPing sonar(TRIGGER_PIN_R, ECHO_PIN_R, MAX_DISTANCE_RIGHT);
NewPing sonar1(TRIGGER_PIN_L, ECHO_PIN_L, MAX_DISTANCE_LEFT);


void setup() {
  // put your setup code here, to run once:
  pinMode(R_irsensor,INPUT);
  pinMode(R_irsensor,INPUT);
   pinMode(resetbutton,INPUT_PULLUP);
  
 // pinMode(enright, OUTPUT);
  pinMode(LeftMotorForward, OUTPUT);
  pinMode(LeftMotorBackward, OUTPUT);
  
  pinMode(TRIGGER_PIN_R, OUTPUT);
  pinMode(ECHO_PIN_R, INPUT);
  
  pinMode(TRIGGER_PIN_L, OUTPUT);
  pinMode(ECHO_PIN_L, INPUT);

 // pinMode(MotorA, OUTPUT);  
  pinMode(ena, OUTPUT);

  lcd.init();
  lcd.backlight();

   lcd.print("Road Divider prj");
  lcd.setCursor(0, 1);
  lcd.print("");
  delay(3000);
  lcd.clear();

  
 Serial.begin(9600);
 // reset();
  delay(2000);
}

void loop()
{ 
   lcd.clear();
 
  int rp=((Rtd/10)*100);
 int lp=((Ltd/10)*100);
     


 
  int state=digitalRead(resetbutton);
  if(state==LOW)
  {
     Serial.println("in reset");
   reset();
   
   }
  analogWrite(ena,125);
  Serial.print("rightDistance = ");
  Serial.print(sonar.ping_cm());
  Serial.println(" cm");
 delay(500);
  Serial.print("leftDistance = ");
  Serial.print(sonar1.ping_cm());
  Serial.println(" cm");
  delay(500);
  
 R_irstate=digitalRead(R_irsensor);
  L_irstate=digitalRead(L_irsensor);
 
if( R_irstate==LOW)
{
  //count++;
  Rtd=count++;  //rtd--right traffic density
  

Serial.print("Rtd :");
 Serial.println(Rtd);
      
}

if(  L_irstate==LOW)
{
  //count1++;
  Ltd=count1++;  //Ltd--Left traffic density
    delay(500); 
    Serial.print("Ltd :");
 Serial.println(Ltd);
  
}
    
if(Rtd>Ltd)
   {   
    
        if((Rtd>=5)&&(Ltd<3))
       { 
        lcd.setCursor(0, 0);  
       lcd.print("left-");
       lcd.setCursor(6,0);  
       lcd.print("50");
      
       lcd.setCursor(9, 0);  
       lcd.print("%");

       lcd.setCursor(0, 1);  
       lcd.print("right-");
       lcd.setCursor(6,1);  
       lcd.print("20");
       lcd.print("%");
       delay(2000);
       lcd.clear();
       lcd.setCursor(9, 1);  
      
        lcd.setCursor(0, 0);  
       lcd.print("MOVING DIRECTION");
       lcd.setCursor(1,1);  
       lcd.print("<-<-<-<-<-<-<-");
         gobackward();
         
       
       }
  
    
   }
   else if(Ltd>Rtd)
   { 
    
    if((Rtd<3)&&(Ltd>=5))
       { 
        lcd.setCursor(0, 0);  
       lcd.print("left-");
       lcd.setCursor(6,0);  
       lcd.print(20);
      
       lcd.setCursor(9, 0);  
       lcd.print("%");

       lcd.setCursor(0, 1);  
       lcd.print("right-");
       lcd.setCursor(6,1);  
       lcd.print("50");
       delay(2000);
       lcd.clear();
       
       lcd.setCursor(9, 1);  
      lcd.print("%");
          lcd.setCursor(0, 0);  
       lcd.print("MOVING DIRECTION");
       lcd.setCursor(1,1);  
       lcd.print("->->->->->->->");
        goforward();
        lcd.clear();
     
       } 
    }

    
    else if((Ltd>=10)&&(Rtd>=10))
    {   
       center();
      Serial.print("Dont move");
      // digitalWrite (MotorA , LOW);
      // digitalWrite (MotorB , LOW);
    }
}

void gobackward()
{  if(flag1==0)
{  
 
    flag1=1;
    flag2=0;
    Serial.println("It is gobackward():");
    digitalWrite(LeftMotorForward,LOW);
    digitalWrite(LeftMotorBackward,HIGH);
    movement_stop();
    delay(4000);
     digitalWrite(LeftMotorForward,LOW);
    digitalWrite(LeftMotorBackward,LOW);
  
}}
void goforward()
{  
  if(flag2==0)
  {
    flag2=1;
    flag1=0;
   digitalWrite(LeftMotorForward,HIGH);
   digitalWrite(LeftMotorBackward,LOW);
   movement_stop();
   delay(4000);
 
  digitalWrite(LeftMotorForward,LOW);
  digitalWrite(LeftMotorBackward,LOW);
 
  
  }
}

void center()
{
  if((rightdistance==16)&&(leftdistance==16))
  {   
        go_Forward = false;
        go_backward = false;
      Serial.print(rightdistance);
      delay(1000);
      Serial.print(leftdistance);
      delay(1000);
      digitalWrite(LeftMotorForward,LOW);
      digitalWrite(LeftMotorBackward,LOW);
    }
}

void movement_stop()
{
  if((rightdistance==4)||(leftdistance==4))
  {
  digitalWrite(LeftMotorForward,LOW);
  digitalWrite(LeftMotorBackward,LOW);
  }

}
void reset()
{
if((rightdistance<=6)&&(leftdistance<=24))
{ Serial.print("condition satisfied");
  digitalWrite(LeftMotorForward,LOW);  //move backward
  digitalWrite(LeftMotorBackward,HIGH);
  if((rightdistance==16)&&(leftdistance==16))
  {
      digitalWrite(LeftMotorForward,LOW);
      digitalWrite(LeftMotorBackward,LOW);
      
  }

}
else if((leftdistance<=8)&&(rightdistance<=24))
{
  digitalWrite(LeftMotorForward,HIGH);  //move forward
   digitalWrite(LeftMotorBackward,LOW);

    if((rightdistance==16)&&(leftdistance==16))
   {
      digitalWrite(LeftMotorForward,LOW);
      digitalWrite(LeftMotorBackward,LOW);
      
  }
  
  }
}
